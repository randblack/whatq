{"ast":null,"code":"var _jsxFileName = \"/Users/rand/Code/whatq/src/components/eventselect/eventselect.jsx\";\nimport React, { Component } from 'react';\n\nclass EventSelect extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selected: ''\n    };\n  }\n\n  newEvent(e) {\n    this.setState({\n      selected: e.target.value\n    });\n  }\n\n  render() {\n    const existingEvents = this.props.events.map(event => React.createElement(\"option\", {\n      value: event,\n      selected: this.state.selected === event,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, event));\n    return React.createElement(\"select\", {\n      name: \"select\",\n      onChange: this.num,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, existingEvents);\n  }\n\n}\n\nexport default EventSelect;","map":{"version":3,"sources":["/Users/rand/Code/whatq/src/components/eventselect/eventselect.jsx"],"names":["React","Component","EventSelect","constructor","props","state","selected","newEvent","e","setState","target","value","render","existingEvents","events","map","event","num"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,MAAMC,WAAN,SAA0BD,SAA1B,CAAoC;AAClCE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACXC,MAAAA,QAAQ,EAAE;AADC,KAAb;AAGD;;AAEDC,EAAAA,QAAQ,CAACC,CAAD,EAAI;AACV,SAAKC,QAAL,CAAc;AAAEH,MAAAA,QAAQ,EAAEE,CAAC,CAACE,MAAF,CAASC;AAArB,KAAd;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,UAAMC,cAAc,GAAG,KAAKT,KAAL,CAAWU,MAAX,CAAkBC,GAAlB,CAAsBC,KAAK,IAChD;AAAQ,MAAA,KAAK,EAAEA,KAAf;AAAsB,MAAA,QAAQ,EAAE,KAAKX,KAAL,CAAWC,QAAX,KAAwBU,KAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAgEA,KAAhE,CADqB,CAAvB;AAIA,WACE;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,QAAQ,EAAE,KAAKC,GAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGJ,cADH,CADF;AAKD;;AAvBiC;;AAyBpC,eAAeX,WAAf","sourcesContent":["import React, { Component } from 'react';\n\nclass EventSelect extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      selected: '',\n    };\n  }\n\n  newEvent(e) {\n    this.setState({ selected: e.target.value });\n  }\n\n  render() {\n    const existingEvents = this.props.events.map(event => (\n      <option value={event} selected={this.state.selected === event}>{event}</option>\n    ));\n\n    return (\n      <select name=\"select\" onChange={this.num}>\n        {existingEvents}\n      </select>\n    );\n  }\n}\nexport default EventSelect;\n"]},"metadata":{},"sourceType":"module"}